buildscript {
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion")
        classpath("org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion")
        classpath("org.springframework:spring-context:$springVersion")
        classpath("org.springframework:spring-core:$springVersion")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.jetbrains.kotlin.plugin.jpa'

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

dependencies {
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
    compile("org.springframework:spring-context:$springVersion")
    compile("org.springframework:spring-core:$springVersion")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    compile project(':cr-tool')

    testCompile("com.nhaarman:mockito-kotlin:$mockitoKotlinVersion")
    testCompile("org.mockito:mockito-core:$mockitoVersion")
    testCompile("org.junit.jupiter:junit-jupiter-params:$jUnitVersion")
    testCompile project(path: ':cr-tool', configuration: 'testArtifacts')
    testImplementation("org.junit.jupiter:junit-jupiter-api:$jUnitVersion")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$jUnitVersion")
}

sourceSets {
    main.kotlin.srcDirs = ["src/main/kt"]
    test.kotlin.srcDirs = ["src/test/kt"]
}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}